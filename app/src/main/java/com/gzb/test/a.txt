package com.cambricon.cameratest1;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.nio.ByteBuffer;
import java.util.Arrays;


public class MainActivity extends AppCompatActivity {
    private final String TAG = "MainActivity";

    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();

    static {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);

    }

    private TextureView cView;//用于相机预览
    private TextureView rView;//用于标注人脸
    private ImageView imageView;//拍照照片显示
    private TextView textView;
    private Button btnFront;
    private Button btnBack;
    private Button btnClose;
    private Button btnCapture;

    private Surface previewSurface;//预览Surface
    private ImageReader cImageReader;
    private Surface captureSurface;//拍照Surface

    HandlerThread cHandlerThread;//相机处理线程
    Handler cHandler;//相机处理
    CameraDevice cDevice;
    CameraCaptureSession cSession;

    CameraDevice.StateCallback cDeviceOpenCallback = null;//相机开启回调

    CaptureRequest.Builder previewRequestBuilder;//预览请求构建
    CaptureRequest previewRequest;//预览请求
    CameraCaptureSession.CaptureCallback previewCallback;//预览回调

    CaptureRequest.Builder captureRequestBuilder;
    CaptureRequest captureRequest;
    CameraCaptureSession.CaptureCallback captureCallback;
    int[] faceDetectModes;
    // Rect rRect;//相机成像矩形
    Size cPixelSize;//相机成像尺寸
    int cOrientation;
    Size captureSize;

    boolean isFront;
    Paint pb;
    Bitmap bitmap;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initView();

    }

    private void initView() {
        cView = findViewById(R.id.cView);
        rView = findViewById(R.id.rView);
        imageView = findViewById(R.id.imageView);
        textView = findViewById(R.id.textView);
        btnFront = findViewById(R.id.btnFront);
        btnBack = findViewById(R.id.btnBack);
        btnClose = findViewById(R.id.btnClose);
        btnCapture = findViewById(R.id.btnCapture);

        //隐藏背景色，以免标注人脸时挡住预览画面
        rView.setAlpha(0.9f);

        btnFront.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openCamera(true);
            }
        });
        btnBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openCamera(false);
            }
        });

        btnClose.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                closeCamera();
            }
        });
        btnCapture.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                executeCapture();
            }
        });


    }

    private void openCamera(boolean isFront) {
        closeCamera();
        this.isFront = isFront;
        String cId = null;
        //获取Camera ID,该ID是用来打开相机的关键，一般后置摄像头是0，前置摄像头是1,
        if (isFront) {
            cId = CameraCharacteristics.LENS_FACING_BACK + "";
        } else {
            cId = CameraCharacteristics.LENS_FACING_FRONT + "";
        }

        CameraManager cManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);

        CameraCharacteristics characteristics;
        //获取开启相机的相关参数
        try {
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                characteristics = cManager.getCameraCharacteristics(cId);
                //获取图片输出的尺寸和预览画面输出的尺寸
                StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                Size[] previewSizes = map.getOutputSizes(SurfaceTexture.class);//获取预览尺寸
                Size[] captureSizes = map.getOutputSizes(ImageFormat.JPEG);//获取拍照尺寸
                cOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);//获取相机角度
                Rect cRect = characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);//获取成像区域
                cPixelSize = characteristics.get(CameraCharacteristics.SENSOR_INFO_PIXEL_ARRAY_SIZE);//获取成像尺寸，同上

                //可用于判断是否支持人脸检测，以及支持到哪种程度
                faceDetectModes = characteristics.get(CameraCharacteristics.STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES);//支持的人脸检测模式
                int maxFaceCount = characteristics.get(CameraCharacteristics.STATISTICS_INFO_MAX_FACE_COUNT);//支持的最大检测人脸数量

                //此处写死640*480，实际从预览尺寸列表选择
                Size sSize = new Size(640, 480);//previewSizes[0];
                // 设置预览尺寸（避免控件尺寸与预览画面尺寸不一致时画面变形）
                cView.getSurfaceTexture().setDefaultBufferSize(sSize.getWidth(), sSize.getHeight());

                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "请授予摄像头权限", Toast.LENGTH_LONG).show();
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA}, 0);
                    return;
                }
                //根据摄像头ID，开启摄像头
                try {
                    cManager.openCamera(cId, getCDeviceOpenCallback(), getCHandler());
                } catch (CameraAccessException e1) {
                    Log.e(TAG, "error_e1");
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    private void closeCamera() {
        if (cSession != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                cSession.close();
            }
            cSession = null;
        }
        if (cDevice != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                cDevice.close();
            }
            cDevice = null;
        }
        if (cImageReader != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                cImageReader.close();
            }
            cImageReader = null;
            captureRequestBuilder = null;
        }
        if (cHandlerThread != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                cHandlerThread.quitSafely();
            }
            try {
                cHandlerThread.join();
                cHandlerThread = null;
                cHandler = null;
            } catch (InterruptedException e) {
                Log.e(TAG, "closeCamera: " + e);
            }
        }


    }

    /**
     * 初始化并获取相机开启回调对象。当准备就绪后，发起预览请求
     */

    private CameraDevice.StateCallback getCDeviceOpenCallback() {
        if (cDeviceOpenCallback == null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                cDeviceOpenCallback = new CameraDevice.StateCallback() {
                    @Override
                    public void onOpened(@NonNull CameraDevice cameraDevice) {
                        cDevice = cameraDevice;
                        try {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                //创建Session，需先完成画面呈现目标（此处为预览和拍照Surface）的初始化
                                cameraDevice.createCaptureSession(Arrays.asList(getPreviewSurface(), getCaptureSurface()), new CameraCaptureSession.StateCallback() {
                                    @Override
                                    public void onConfigured(@NonNull CameraCaptureSession session) {
                                        cSession = session;
                                        //构建预览请求，并发起请求
                                        // Log("[发出预览请求]");
                                        try {
                                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                                session.setRepeatingRequest(getPreviewRequest(), getPreviewCallback(), getCHandler());
                                            }

                                        } catch (Exception e) {
                                            Log.e(TAG, "onConfigured: " + e);
                                        }


                                    }

                                    @Override
                                    public void onConfigureFailed(@NonNull CameraCaptureSession session) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                                            session.close();
                                        }
                                    }
                                }, getCHandler());
                            }

                        } catch (Exception e) {
                            Log.e(TAG, "onOpened: " + e);
                        }

                    }

                    @Override
                    public void onDisconnected(@NonNull CameraDevice cameraDevice) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            cameraDevice.close();
                        }
                    }

                    @Override
                    public void onError(@NonNull CameraDevice cameraDevice, int i) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            cameraDevice.close();
                        }
                    }
                };
            }
        }

        return cDeviceOpenCallback;


    }

    /**
     * 初始化并获取相机线程处理 * @return
     */
    private Handler getCHandler() {
        if (cHandler == null) { //单独开一个线程给相机使用
            cHandlerThread = new HandlerThread("cHandlerThread");
            cHandlerThread.start();
            cHandler = new Handler(cHandlerThread.getLooper());
        }
        return cHandler;
    }

    /**
     * 获取支持的最高人脸检测级别 * @return
     */
    private int getFaceDetectMode() {
        if (faceDetectModes == null) {
            return CaptureRequest.STATISTICS_FACE_DETECT_MODE_FULL;
        } else {
            return faceDetectModes[faceDetectModes.length - 1];
        }
    }

    /*---------------------------------预览相关---------------------------------*/

    /**
     * 初始化并获取预览回调对象
     *
     * @return
     */
    private CameraCaptureSession.CaptureCallback getPreviewCallback() {
        if (previewCallback == null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                previewCallback = new CameraCaptureSession.CaptureCallback() {
                    public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            MainActivity.this.onCameraImagePreviewed(result);
                        }
                    }
                };
            }
        }
        return previewCallback;
    }

    /**
     * 初始化并获取预览请求构建对象，进行通用配置，并每次获取时进行人脸检测级别配置
     *
     * @return
     */
    private CaptureRequest.Builder getPreviewRequestBuilder() {
        if (previewRequestBuilder == null) {
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    previewRequestBuilder = cSession.getDevice().createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
                    previewRequestBuilder.addTarget(getPreviewSurface());
                    previewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);//自动曝光、白平衡、对焦
                }


                return previewRequestBuilder;
            } catch (Exception e) {
                Log.e(TAG, "getPreviewRequestBuilder: " + e);
            }
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            previewRequestBuilder.set(CaptureRequest.STATISTICS_FACE_DETECT_MODE, getFaceDetectMode());//设置人脸检测级别
        }
        return previewRequestBuilder;
    }

    /**
     * 获取预览Surface * @return
     */
    private Surface getPreviewSurface() {
        if (previewSurface == null) {
            previewSurface = new Surface(cView.getSurfaceTexture());
        }
        return previewSurface;
    }

    /**
     * 处理相机画面处理完成事件，获取检测到的人脸坐标，换算并绘制方框
     *
     * @param result
     */
    private void onCameraImagePreviewed(CaptureResult result) {
        Log.e(TAG, "onCameraImagePreviewed: ...");
    }

    /**
     * 初始化画笔
     */
    private Paint getPaint() {
        if(pb == null){
                pb =new Paint();
                pb.setColor(Color.BLUE);
                pb.setStrokeWidth(10);
                pb.setStyle(Paint.Style.STROKE);//使绘制的矩形中空
            }
            return pb;
    }

    /*---------------------------------拍照相关---------------------------------*/

    /**
     * 初始化拍照相关
     */
    private Surface getCaptureSurface() {
       if (cImageReader == null) {
                   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                           cImageReader = ImageReader.newInstance(getCaptureSize().getWidth(), getCaptureSize().getHeight(), ImageFormat.JPEG, 2);
                       }
                       cImageReader.setOnImageAvailableListener(new ImageReader.OnImageAvailableListener() {
                           @Override
                           public void onImageAvailable(ImageReader reader) {
                               onCaptureFinished(reader);
                           }
                       }, getCHandler());
                       captureSurface = cImageReader.getSurface();
                   }
               }
               return captureSurface;
    }

    public void SetCaptureSize(Size captureSize) {
        this.captureSize = captureSize;
    }

    /**
     * 获取拍照尺寸
     *
     * @return
     */
    private Size getCaptureSize() {
        if (captureSize != null) {
            return captureSize;
        } else {
            return cPixelSize;
        }
    }

    /**
     * 执行拍照
     */
    private void executeCapture() {
        try {
            Log.i(this.getClass().getName(), "发出请求");
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                cSession.capture(getCaptureRequest(), getCaptureCallback(), getCHandler());
            }
        } catch (Exception e) {
            Log.e(TAG, "executeCapture: " + e);
        }
    }

    private CaptureRequest getCaptureRequest() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            captureRequest = getCaptureRequestBuilder().build();
        }
        return captureRequest;
    }

    private CaptureRequest.Builder getCaptureRequestBuilder() {
        if (captureRequestBuilder == null) {
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    captureRequestBuilder = cSession.getDevice().createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
                    captureRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
                    captureRequestBuilder.addTarget(getCaptureSurface());
                    int rotation = getWindowManager().getDefaultDisplay().getRotation();
                    int rotationTo = getOrientation(rotation);
                    captureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, rotationTo);


                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return captureRequestBuilder;
    }


    private CameraCaptureSession.CaptureCallback getCaptureCallback() {
        if (captureCallback == null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                captureCallback = new CameraCaptureSession.CaptureCallback() {
                    public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            MainActivity.this.onCameraImagePreviewed(result);
                        }
                    }
                };
            }
        }
        return captureCallback;
    }

    /**
     * 生成并获取预览请求 * @return
     */
    private CaptureRequest getPreviewRequest() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            previewRequest = getPreviewRequestBuilder().build();
        }
        return previewRequest;
    }


    private int getOrientation(int rotation) {
        return (ORIENTATIONS.get(rotation) + cOrientation + 270) % 360;
    }

    /**
     * 处理相机拍照完成的数据
     *
     * @param reader
     */
    private void onCaptureFinished(ImageReader reader) {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
            Image image = reader.acquireLatestImage();
            ByteBuffer buffer = image.getPlanes()[0].getBuffer();
            byte[] data = new byte[buffer.remaining()];
            buffer.get(data);
            image.close();
            buffer.clear();

            if (bitmap != null) {
                bitmap.recycle();
                bitmap = null;
            }
            bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
            data = null;

            if (bitmap != null) {
                if (isFront) {
                    Matrix matrix = new Matrix();
                    matrix.postScale(-1, 1);
                    Bitmap imgToShow = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, false);
                    bitmap.recycle();
                    showImage(imgToShow);
                } else {
                    showImage(bitmap);
                }
            }
            Runtime.getRuntime().gc();


        }
    }

    private void showImage(final Bitmap image) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                imageView.setImageBitmap(image);
            }
        });
    }

    private void showMessage(final boolean add, final String message) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (add) {
                    textView.setText(textView.getText() + "\n" + message);
                } else {
                    textView.setText(message);
                }
            }
        });
    }


}





















































